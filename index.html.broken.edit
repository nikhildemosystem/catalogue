<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Platform X Catalogue - Standalone Version</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        /* Modal Styles */
        .modal-overlay {
            transition: opacity 0.3s ease-in-out;
        }
        .modal-content {
            transition: transform 0.3s ease-in-out;
        }

        /* Flip Card Styles */
        .flip-card {
            background-color: transparent;
            width: 100%;
            height: 250px;
            perspective: 1000px;
            cursor: pointer;
        }
        .flip-card-inner {
            position: relative;
            width: 100%;
            height: 100%;
            text-align: center;
            transition: transform 0.6s;
            transform-style: preserve-3d;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.1);
            border-radius: 0.75rem;
        }
        .flip-card.is-flipped .flip-card-inner {
            transform: rotateY(180deg);
        }
        .flip-card-front, .flip-card-back {
            position: absolute;
            width: 100%;
            height: 100%;
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            border-radius: 0.75rem;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 1.5rem;
        }
        .flip-card-front {
            background-color: white;
            color: #1e293b;
        }
        .flip-card-back {
            background-color: #4f46e5;
            color: white;
            transform: rotateY(180deg);
            text-align: left;
            align-items: flex-start;
        }

        /* Mind Map Section Styles */
        #mindmap-container {
            position: relative;
            padding: 8rem 4rem 4rem 4rem;
            display: flex;
            align-items: flex-start;
            justify-content: center;
            width: 100%;
            min-height: 100vh;
            overflow: auto;
        }
        .mindmap-content {
            display: flex;
            align-items: flex-start;
        }
        .node-level {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: flex-start;
            margin-left: 150px;
        }
        .node-level:first-child { margin-left: 0; }
        .node-wrapper {
            margin: 1.5rem 0;
            position: relative;
            display: flex;
            align-items: flex-start;
        }
        .node-container {
             display: flex;
             flex-direction: column;
        }
        .node {
            background-color: white;
            border-radius: 0.5rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.05);
            display: flex;
            align-items: center;
            padding: 0.5rem;
            min-width: 160px;
            flex-shrink: 0;
            border: 1px solid #e2e8f0;
        }
        .track-node, .level-node { cursor: pointer; }
        .node-text {
            outline: none;
            flex-grow: 1;
            padding: 0.25rem 0.5rem;
        }
        .node-text:focus, .editable-field:focus {
            background-color: #f8fafc;
            box-shadow: inset 0 0 0 2px #60a5fa;
            border-radius: 0.25rem;
        }
        .node-actions, .sub-level-actions {
            display: flex;
            align-items: center;
        }
        .node-actions button, .sub-level-actions button, .card-actions button {
            width: 20px;
            height: 20px;
            border-radius: 9999px;
            margin-left: 4px;
            font-size: 0.8rem;
            font-weight: bold;
            color: white;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
            cursor: pointer;
            flex-shrink: 0;
        }
        .add-btn { background-color: #22c55e; }
        .add-btn:hover { background-color: #16a34a; }
        .remove-btn { background-color: #ef4444; }
        .remove-btn:hover { background-color: #dc2626; }
        
        .central-node { background-color: #4f46e5; color: white; padding: 1.5rem; text-align: center; border: none; }
        .track-node { font-weight: 500; }
        .track-node.developer { border-color: #10b981; color: #047857; }
        .track-node.platform-engineer { border-color: #3b82f6; color: #1d4ed8; }
        .track-node.business { border-color: #f97316; color: #c2410c; }
        .track-node.default { border-color: #64748b; color: #475569; }
        .level-node { font-size: 0.9rem; color: #475569; padding-left: 1rem; padding-right: 0.5rem; }
        
        .detail-card {
            align-items: flex-start;
            padding: 0.75rem;
            border-left-width: 4px;
            flex-direction: column;
            margin-top: 0.75rem;
        }
        .sub-level-node { 
            align-items: flex-start;
            padding: 0.75rem;
            border-left-width: 4px;
            flex-direction: column;
        }
        .sub-level-node.sub-level-developer, .detail-card.developer { background-color: #f0fdfa; border-color: #10b981; }
        .sub-level-node.sub-level-platform-engineer, .detail-card.platform-engineer { background-color: #eff6ff; border-color: #3b82f6; }
        .sub-level-node.sub-level-business, .detail-card.business { background-color: #fff7ed; border-color: #f97316; }
        .sub-level-node.sub-level-default, .detail-card.default { background-color: #f1f5f9; border-color: #64748b; }

        .card-content { flex-grow: 1; width: 100%; }
        .field-group { display: flex; flex-direction: column; margin-bottom: 0.25rem; }
        .custom-field-group { display: flex; align-items: center; margin-bottom: 0.25rem; }
        .field-group:last-child, .custom-field-group:last-child { margin-bottom: 0; }
        .field-label { font-size: 0.7rem; font-weight: 600; color: #94a3b8; text-transform: uppercase; }
        .editable-field { 
            padding: 0.1rem 0.25rem; 
            min-height: 1.25rem;
            font-size: 0.9rem;
            font-weight: 500;
            color: #334155;
        }
        .card-actions, .sub-level-actions {
            display: flex;
            justify-content: flex-end;
            width: 100%;
            margin-top: 0.5rem;
            padding-top: 0.5rem;
            border-top: 1px solid #e2e8f0;
        }
         .sub-level-actions { justify-content: space-between; }


        .line { position: absolute; background-color: #d1d5db; z-index: -1; }

        .toggle-icon {
            margin-left: auto;
            padding-left: 0.5rem;
            transition: transform 0.3s ease;
        }
        .collapsed .toggle-icon {
            transform: rotate(-90deg);
        }
    </style>
</head>
<body>
    <header class="fixed top-0 left-0 p-4 z-50">
        <button id="overview-btn" class="bg-indigo-600 text-white px-4 py-2 rounded-lg shadow-md font-semibold hover:bg-indigo-700 transition-colors flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
            </svg>
            Overview
        </button>
        <button id="reset-btn" class="bg-gray-200 text-gray-800 px-3 py-1 rounded-lg ml-2 hover:bg-gray-300 transition-colors">Reset</button>
        <button id="export-btn" class="bg-blue-200 text-blue-800 px-3 py-1 rounded-lg ml-2 hover:bg-blue-300 transition-colors">Export</button>
        <label class="ml-2 bg-green-200 text-green-800 px-3 py-1 rounded-lg cursor-pointer hover:bg-green-300 transition-colors">
            Import <input type="file" id="import-input" accept=".json" class="hidden">
        </label>

    </header>

    <main>
        <div id="mindmap-container">
            <div id="mindmap-content" class="mindmap-content"></div>
        </div>
        <div id="lines-container" class="absolute top-0 left-0 w-full h-full pointer-events-none"></div>
    </main>

    <!-- Modal for Overview -->
    <div id="overview-modal" class="modal-overlay fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50 hidden">
        <div class="modal-content bg-slate-100 rounded-lg shadow-2xl max-w-4xl w-full relative transform scale-95 p-8">
            <button id="modal-close-btn" class="absolute top-4 right-4 text-slate-500 hover:text-slate-800 text-3xl font-bold">&times;</button>
            <section id="overview">
                <div class="max-w-4xl mx-auto">
                    <h2 class="text-3xl font-bold text-center text-slate-800">Overview</h2>
                    <p class="text-center text-slate-500 mt-2 mb-8">Click on any question to flip it and see the answer.</p>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                        <div class="flip-card">
                            <div class="flip-card-inner">
                                <div class="flip-card-front"><h2 class="text-2xl font-bold">Why are we doing this?</h2></div>
                                <div class="flip-card-back"><h3 class="text-xl font-bold mb-2">Why are we doing this?</h3><p class="text-base">To prepare a catalogue that provides a uniform, expert approach for customer engagements, ensuring consistency and quality.</p></div>
                            </div>
                        </div>
                        <div class="flip-card">
                            <div class="flip-card-inner">
                                <div class="flip-card-front"><h2 class="text-2xl font-bold">How do I choose the right session?</h2></div>
                                <div class="flip-card-back"><h3 class="text-xl font-bold mb-2">How do I choose the right session?</h3><p class="text-base">This catalogue is designed to solve that. Identify the customer's persona (e.g., Developer) and skill level (e.g., 201), then use the mind map to find the corresponding sessions.</p></div>
                            </div>
                        </div>
                        <div class="flip-card">
                            <div class="flip-card-inner">
                                <div class="flip-card-front"><h2 class="text-2xl font-bold">What and who are we focusing on?</h2></div>
                                <div class="flip-card-back"><h3 class="text-xl font-bold mb-2">What and who are we focusing on?</h3><p class="text-base">We are focusing on at least three personas: <span class="font-semibold">Developers</span>, <span class="font-semibold">Platform Engineers</span>, and <span class="font-semibold">Non-Technical</span> stakeholders (Business Value).</p></div>
                            </div>
                        </div>
                        <div class="flip-card">
                            <div class="flip-card-inner">
                                <div class="flip-card-front"><h2 class="text-2xl font-bold">How are we doing this?</h2></div>
                                <div class="flip-card-back"><h3 class="text-xl font-bold mb-2">How are we doing this?</h3><p class="text-base">Through a combination of presentations, live demos, in-person workshops, and collaborative discussions.</p></div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const container = document.getElementById('mindmap-content');
            const linesContainer = document.getElementById('lines-container');
            let nodeCounter = 0;
            let mindmapData = {};

            const defaultData = {
                id: `node-0`, text: 'PlatformX Catalogue', type: 'central',
                children: [
                    { 
                        id: `node-1`, text: 'Developer', type: 'track', class: 'developer', isCollapsed: false,
                        cardTitle: 'Developer Track Overview',
                        lines: [{id: 'line-1', text: 'Main description for the developer track.'}],
                        children: [
                            { id: `node-2`, text: '101', type: 'level', isCollapsed: true, children: [] },
                            { id: `node-3`, text: '201', type: 'level', isCollapsed: true, children: [] },
                        ]
                    },
                    { 
                        id: `node-4`, text: 'Platform Engineer', type: 'track', class: 'platform-engineer', isCollapsed: true, 
                        cardTitle: 'Platform Engineer Overview',
                        lines: [],
                        children: []
                    },
                    { 
                        id: `node-5`, text: 'Business Value', type: 'track', class: 'business', isCollapsed: true, 
                        cardTitle: 'Business Value Overview',
                        lines: [],
                        children: []
                    }
                ]
            };
            
            function saveDataToLocalStorage() {
                localStorage.setItem('mindmapData', JSON.stringify(mindmapData));
            }
            
            function loadDataFromLocalStorage() {
                const savedData = localStorage.getItem('mindmapData');
                if (savedData) {
                    mindmapData = JSON.parse(savedData);
                    const maxId = Math.max(...JSON.stringify(mindmapData).match(/node-(\d+)/g).map(s => parseInt(s.split('-')[1])));
                    nodeCounter = maxId + 1;
                } else {
                    mindmapData = defaultData;
                    nodeCounter = 6;
                    saveDataToLocalStorage();
                }
            }

            function initializePublicUI() {
                const overviewBtn = document.getElementById('overview-btn');
                const modal = document.getElementById('overview-modal');
                const closeModalBtn = document.getElementById('modal-close-btn');

                overviewBtn.addEventListener('click', () => {
                    modal.classList.remove('hidden');
                });

                closeModalBtn.addEventListener('click', () => {
                    modal.classList.add('hidden');
                });

                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        modal.classList.add('hidden');
                    }
                });

                modal.querySelectorAll('.flip-card').forEach(card => {
                    card.addEventListener('click', () => {
                        card.classList.toggle('is-flipped');
                    });
                });
            }

            function createNodeElement(nodeData, parentData, trackClass) {
                const nodeWrapper = document.createElement('div');
                nodeWrapper.className = 'node-wrapper';
                nodeWrapper.dataset.id = nodeData.id;

                const nodeContainer = document.createElement('div');
                nodeContainer.className = 'node-container';

                const nodeEl = document.createElement('div');
                nodeEl.classList.add('node', `${nodeData.type}-node`);
                if (nodeData.class) nodeEl.classList.add(nodeData.class);
                if (nodeData.isCollapsed) nodeEl.classList.add('collapsed');

                const nodeActions = document.createElement('div');
                nodeActions.className = 'node-actions';

                if (nodeData.type === 'sub-level') {
                    const contentDiv = document.createElement('div');
                    contentDiv.className = 'sub-level-content';
                    const fields = [
                        { label: 'Title', key: 'title' }, { label: 'URL', key: 'url' },
                        { label: 'Description', key: 'description' }, { label: 'Duration', key: 'duration' }
                    ];
                    fields.forEach(field => {
                        const fieldGroup = document.createElement('div');
                        fieldGroup.className = 'field-group';
                        fieldGroup.innerHTML = `<label class="field-label">${field.label}</label><div class="editable-field" contenteditable="true" data-field="${field.key}">${nodeData[field.key] || ''}</div>`;
                        contentDiv.appendChild(fieldGroup);
                    });
                    (nodeData.customFields || []).forEach(field => {
                        const fieldGroup = document.createElement('div');
                        fieldGroup.className = 'custom-field-group';
                        fieldGroup.dataset.fieldId = field.id;
                        fieldGroup.innerHTML = `<div class="editable-field" contenteditable="true" data-field="label" style="width: 80px; flex-shrink: 0; font-weight: 600; color: #64748b;">${field.label}:</div><div class="editable-field" contenteditable="true" data-field="value" style="flex-grow: 1;">${field.value}</div><button class="remove-btn" onclick="removeCustomField(event, '${nodeData.id}', '${field.id}')">-</button>`;
                        contentDiv.appendChild(fieldGroup);
                    });
                    nodeEl.appendChild(contentDiv);
                    
                    const actionDiv = document.createElement('div');
                    actionDiv.className = 'sub-level-actions';
                    const addFieldBtn = document.createElement('button');
                    addFieldBtn.className = 'add-btn'; addFieldBtn.textContent = '+';
                    addFieldBtn.onclick = (e) => { e.stopPropagation(); addCustomField(nodeData.id); };
                    const removeNodeBtn = document.createElement('button');
                    removeNodeBtn.className = 'remove-btn'; removeNodeBtn.textContent = '-';
                    removeNodeBtn.onclick = (e) => { e.stopPropagation(); removeNode(nodeData.id, parentData.id); };
                    actionDiv.appendChild(addFieldBtn);
                    actionDiv.appendChild(removeNodeBtn);
                    nodeEl.appendChild(actionDiv);
                    
                } else {
                    const nodeText = document.createElement('span');
                    nodeText.className = 'node-text';
                    nodeText.textContent = nodeData.text;
                    nodeText.setAttribute('contenteditable', 'true');
                    nodeEl.appendChild(nodeText);
                }

                if (nodeData.type === 'central') {
                    const addBtn = document.createElement('button'); addBtn.className = 'add-btn'; addBtn.textContent = '+';
                    addBtn.onclick = (e) => { e.stopPropagation(); addTrackNode(); };
                    nodeActions.appendChild(addBtn);
                }
                if (nodeData.type === 'track') {
                    const addBtn = document.createElement('button'); addBtn.className = 'add-btn'; addBtn.textContent = '+';
                    addBtn.onclick = (e) => { e.stopPropagation(); addLevelNode(nodeData); };
                    const removeBtn = document.createElement('button'); removeBtn.className = 'remove-btn'; removeBtn.textContent = '-';
                    removeBtn.onclick = (e) => { e.stopPropagation(); removeNode(nodeData.id, parentData.id); };
                    nodeActions.appendChild(addBtn);
                    nodeActions.appendChild(removeBtn);
                }
                if (nodeData.type === 'level') {
                    const addBtn = document.createElement('button'); addBtn.className = 'add-btn'; addBtn.textContent = '+';
                    addBtn.onclick = (e) => { e.stopPropagation(); addSubLevelNode(nodeData); };
                    const removeBtn = document.createElement('button'); removeBtn.className = 'remove-btn'; removeBtn.textContent = '-';
                    removeBtn.onclick = (e) => { e.stopPropagation(); removeNode(nodeData.id, parentData.id); };
                    nodeActions.appendChild(addBtn);
                    nodeActions.appendChild(removeBtn);
                }
                
                if (nodeData.type !== 'sub-level') nodeEl.appendChild(nodeActions);

                if (nodeData.type === 'track' || nodeData.type === 'level') {
                    const toggleIcon = document.createElement('span');
                    toggleIcon.className = 'toggle-icon';
                    toggleIcon.textContent = '▼';
                    nodeEl.appendChild(toggleIcon);
                    nodeEl.addEventListener('click', (e) => {
                        if (e.target.closest('button') || e.target.isContentEditable) {
                            return;
                        }
                        if (nodeData.type === 'track') toggleCollapse(nodeData.id, 'track');
                        if (nodeData.type === 'level') toggleCollapse(nodeData.id, 'level', parentData.id);
                    });
                }
                
                nodeContainer.appendChild(nodeEl);
                
                if (nodeData.type === 'track' && !nodeData.isCollapsed) {
                    const detailCard = document.createElement('div');
                    detailCard.className = `node detail-card ${nodeData.class}`;
                    const contentDiv = document.createElement('div');
                    contentDiv.className = 'card-content';
                    
                    const titleGroup = document.createElement('div');
                    titleGroup.className = 'field-group';
                    titleGroup.innerHTML = `<div class="editable-field text-lg font-bold" contenteditable="true" data-field="cardTitle">${nodeData.cardTitle || 'Card Title'}</div>`;
                    contentDiv.appendChild(titleGroup);

                    (nodeData.lines || []).forEach(line => {
                        const lineEl = document.createElement('div');
                        lineEl.className = 'custom-field-group';
                        lineEl.dataset.lineId = line.id;
                        lineEl.innerHTML = `<div class="editable-field" contenteditable="true" data-field="text" style="flex-grow: 1;">${line.text}</div><button class="remove-btn" onclick="removeTrackLine('${nodeData.id}', '${line.id}')">-</button>`;
                        contentDiv.appendChild(lineEl);
                    });

                    const actionDiv = document.createElement('div');
                    actionDiv.className = 'card-actions';
                    const addFieldBtn = document.createElement('button');
                    addFieldBtn.className = 'add-btn'; addFieldBtn.textContent = '+';
                    addFieldBtn.onclick = (e) => { e.stopPropagation(); addTrackLine(nodeData.id); };
                    actionDiv.appendChild(addFieldBtn);
                    
                    detailCard.appendChild(contentDiv);
                    detailCard.appendChild(actionDiv);
                    nodeContainer.appendChild(detailCard);
                }

                nodeWrapper.appendChild(nodeContainer);
                return nodeWrapper;
            }
            
            function findNodeById(data, id) {

function syncEditsToData() {
    document.querySelectorAll('[contenteditable][data-field]').forEach(el => {
        const field = el.dataset.field;
        const nodeWrapper = el.closest('.node-wrapper');
        if (!nodeWrapper) return;
        const nodeId = nodeWrapper.dataset.id;
        const node = findNodeById(mindmapData, nodeId);
        if (!node) return;

        const parentGroup = el.closest('.custom-field-group');
        if (parentGroup?.dataset?.lineId) {
            const line = (node.lines || []).find(l => l.id === parentGroup.dataset.lineId);
            if (line) line[field] = el.innerText.trim();
        } else if (parentGroup?.dataset?.fieldId) {
            const fieldObj = (node.customFields || []).find(f => f.id === parentGroup.dataset.fieldId);
            if (fieldObj) fieldObj[field] = el.innerText.trim();
        } else {
            node[field] = el.innerText.trim();
        }
    });
}

                if (data.id === id) return data;
                for (const child of data.children || []) {
                    const found = findNodeById(child, id);
                    if (found) return found;
                }
                return null;
            }

            function toggleCollapse(nodeId, type, parentId = null) {
                const clickedNode = findNodeById(mindmapData, nodeId);
                if (!clickedNode) return;

                let siblings = [];
                if (type === 'track') {
                    siblings = mindmapData.children;
                } else if (type === 'level' && parentId) {
                    const parentNode = findNodeById(mindmapData, parentId);
                    if (parentNode) siblings = parentNode.children;
                }
                
                const wasCollapsed = clickedNode.isCollapsed;
                siblings.forEach(node => {
                    if (node.id !== nodeId) {
                        node.isCollapsed = true;
                    }
                });
                clickedNode.isCollapsed = !wasCollapsed;

                syncEditsToData();
syncEditsToData();
saveDataToLocalStorage();
rerender();
            }

            function addTrackNode() {
                const trackClasses = ['developer', 'platform-engineer', 'business', 'default'];
                const newClass = trackClasses[mindmapData.children.length % trackClasses.length];
                const newNode = {
                    id: `node-${nodeCounter++}`, text: 'New Track', type: 'track', class: newClass, isCollapsed: true,
                    cardTitle: 'New Track Overview', lines: [], children: []
                };
                mindmapData.children.push(newNode);
                syncEditsToData();
syncEditsToData();
saveDataToLocalStorage();
rerender();
            }

            function addLevelNode(parentNodeData) {
                const newNode = { id: `node-${nodeCounter++}`, text: 'New Level', type: 'level', isCollapsed: true, children: [] };
                parentNodeData.children.push(newNode);
                syncEditsToData();
syncEditsToData();
saveDataToLocalStorage();
rerender();
            }

            function addSubLevelNode(parentNodeData) {
                const subLevelCount = parentNodeData.children.length + 1;
                const newNode = { id: `node-${nodeCounter++}`, type: 'sub-level', title: `${parentNodeData.text}.${subLevelCount}`, url: 'https://example.com', description: 'Editable description', duration: '1h', customFields: [], children: [] };
                parentNodeData.children.push(newNode);
                parentNodeData.isCollapsed = false;
                syncEditsToData();
syncEditsToData();
saveDataToLocalStorage();
rerender();
            }

            window.addTrackLine = function(nodeId) {
                const node = findNodeById(mindmapData, nodeId);
                if (node && node.type === 'track') {
                    if (!node.lines) node.lines = [];
                    node.lines.push({ id: `line-${Date.now()}`, text: 'New editable line' });
                    syncEditsToData();
saveDataToLocalStorage();
rerender(); // Redraw to show new line
                }
            }

            window.removeTrackLine = function(nodeId, lineId) {
                const node = findNodeById(mindmapData, nodeId);
                if (node && node.lines) {
                    node.lines = node.lines.filter(l => l.id !== lineId);
                    syncEditsToData();
saveDataToLocalStorage();
rerender(); // Redraw to remove line
                }
            }

            window.addCustomField = function(nodeId) {
                const node = findNodeById(mindmapData, nodeId);
                if (node && node.type === 'sub-level') {
                    if (!node.customFields) node.customFields = [];
                    node.customFields.push({ id: `field-${Date.now()}`, label: 'New Field', value: '...' });
                    syncEditsToData();
saveDataToLocalStorage();
rerender(); // Redraw to show new field
                }
            }

            window.removeCustomField = function(nodeId, fieldId) {
                const node = findNodeById(mindmapData, nodeId);
                if (node && node.customFields) {
                    node.customFields = node.customFields.filter(f => f.id !== fieldId);
                    syncEditsToData();
saveDataToLocalStorage();
rerender(); // Redraw to remove field
                }
            }

            function removeNode(nodeId, parentId) {
                const parentNode = findNodeById(mindmapData, parentId);
                if (parentNode) {
                    parentNode.children = parentNode.children.filter(child => child.id !== nodeId);
                    syncEditsToData();
syncEditsToData();
saveDataToLocalStorage();
rerender();
                }
            }

            function drawLines() {
                linesContainer.innerHTML = '';
                const mindmapContainerRect = document.getElementById('mindmap-container').getBoundingClientRect();
                const queue = [mindmapData];
                while(queue.length > 0) {
                    const parentData = queue.shift();
                    if (parentData.children && parentData.children.length > 0 && !parentData.isCollapsed) {
                        const parentWrapper = document.querySelector(`.node-wrapper[data-id="${parentData.id}"]`);
                        if (!parentWrapper) continue;
                        const parentRect = parentWrapper.querySelector('.node').getBoundingClientRect();
                        const parentExitX = parentRect.right - mindmapContainerRect.left;
                        const parentExitY = parentRect.top - mindmapContainerRect.top + parentRect.height / 2;
                        const childrenWrappers = parentData.children.map(child => document.querySelector(`.node-wrapper[data-id="${child.id}"]`)).filter(Boolean);
                        if (childrenWrappers.length > 0) {
                            const firstChildRect = childrenWrappers[0].getBoundingClientRect();
                            const lastChildRect = childrenWrappers[childrenWrappers.length - 1].getBoundingClientRect();
                            const midX = parentExitX + 75;
                            const hLineParent = document.createElement('div');
                            hLineParent.className = 'line';
                            hLineParent.style.left = `${parentExitX}px`; hLineParent.style.top = `${parentExitY - 1}px`;
                            hLineParent.style.width = '75px'; hLineParent.style.height = '2px';
                            linesContainer.appendChild(hLineParent);
                            const vLine = document.createElement('div');
                            vLine.className = 'line';
                            const vTop = firstChildRect.top - mindmapContainerRect.top + firstChildRect.height / 2;
                            const vBottom = lastChildRect.top - mindmapContainerRect.top + lastChildRect.height / 2;
                            vLine.style.left = `${midX - 1}px`; vLine.style.top = `${vTop}px`;
                            vLine.style.width = '2px'; vLine.style.height = `${vBottom - vTop}px`;
                            linesContainer.appendChild(vLine);
                            childrenWrappers.forEach(childWrapper => {
                                const childRect = childWrapper.getBoundingClientRect();
                                const childEntryX = childRect.left - mindmapContainerRect.left;
                                const childEntryY = childRect.top - mindmapContainerRect.top + childRect.height / 2;
                                const hLineChild = document.createElement('div');
                                hLineChild.className = 'line';
                                hLineChild.style.left = `${midX}px`; hLineChild.style.top = `${childEntryY - 1}px`;
                                hLineChild.style.width = `${childEntryX - midX}px`; hLineChild.style.height = '2px';
                                linesContainer.appendChild(hLineChild);
                            });
                        }
                        queue.push(...parentData.children);
                    }
                }
            }

            function rerender() {
                container.innerHTML = '';
                const columns = new Map();
                function placeNode(nodeData, level, parentData, trackClass = '') {
                    if (nodeData.type === 'track') trackClass = nodeData.class;
                    if (!columns.has(level)) {
                        const columnEl = document.createElement('div');
                        columnEl.className = 'node-level';
                        columns.set(level, columnEl);
                        container.appendChild(columnEl);
                    }
                    const column = columns.get(level);
                    const nodeWrapper = createNodeElement(nodeData, parentData, trackClass);
                    column.appendChild(nodeWrapper);
                    if (nodeData.children && !nodeData.isCollapsed) {
                        nodeData.children.forEach(child => {
                            placeNode(child, level + 1, nodeData, trackClass);
                        });
                    }
                }
                placeNode(mindmapData, 0, null);
                setTimeout(drawLines, 50);
            }
            
            
            // Reset to default
            document.getElementById('reset-btn').addEventListener('click', () => {
                if (confirm('Are you sure you want to reset the mindmap?')) {
                    localStorage.removeItem('mindmapData');
                    location.reload();
                }
            });

            // Export mindmap
            document.getElementById('export-btn').addEventListener('click', () => {
                syncEditsToData();
                const dataStr = JSON.stringify(mindmapData, null, 2);
                const blob = new Blob([dataStr], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'mindmap_export.json';
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            });

            // Import mindmap
            document.getElementById('import-input').addEventListener('change', (e) => {
                const file = e.target.files[0];
                if (!file) return;
                const reader = new FileReader();
                reader.onload = (event) => {
                    try {
                        const data = JSON.parse(event.target.result);
                        mindmapData = data;
                        nodeCounter = Math.max(...JSON.stringify(mindmapData).match(/node-(\d+)/g).map(s => parseInt(s.split('-')[1]))) + 1;
                        saveDataToLocalStorage();
                        rerender();
                    } catch (err) {
                        alert('Invalid JSON format.');
                    }
                };
                reader.readAsText(file);
            });

            // Debounced resize
            let resizeTimeout;
            window.addEventListener('resize', () => {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    rerender();
                }, 150);
            });

// Initial setup
            initializePublicUI();
            loadDataFromLocalStorage();
            rerender();
            window.addEventListener('resize', rerender);

            container.addEventListener('blur', (e) => {
                if (e.target.isContentEditable) {
                    saveDataToLocalStorage();
                }
            }, true);
        });
    </script>
</body>
</html>
